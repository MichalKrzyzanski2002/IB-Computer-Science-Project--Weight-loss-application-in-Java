/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package internal;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author micha
 */
public class ChooseFrame extends javax.swing.JFrame {
    private Meal meal=null;
    private javax.swing.JList<Object> list, tempList;
    private String tag="";
    private Person user ;
    private Day day;
    private Frame frame;
    private Object[] olist=null;
    private boolean searched=false;
    /**
     * Creates new form ChooseFrame
     */
    public ChooseFrame(){
    
    }
    public ChooseFrame(Object[] olist, javax.swing.JList<Object> list, String tag, Person user, Frame frame) {
        this.olist=olist;
        this.user=user;
        this.tag=tag;
        initComponents();
        searchList.setModel(new DefaultListModel());
        outputList.setModel(new DefaultListModel());
        tempList=new javax.swing.JList<>();
        tempList.setModel(new DefaultListModel());
        for (Object olist1 : olist) {
            ((DefaultListModel) this.searchList.getModel()).addElement(olist1);
            ((DefaultListModel) this.tempList.getModel()).addElement(olist1);
        }
         ((DefaultListModel) this.searchList.getModel()).setSize(olist.length);
         ((DefaultListModel) this.tempList.getModel()).setSize(olist.length);
        this.list=list;
        this.frame=frame;
        this.day=this.frame.day;
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        addPartButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        searchList = new javax.swing.JList<>();
        searchBar = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        outputList = new javax.swing.JList<>();
        addPartButton = new javax.swing.JButton();
        removePartButton = new javax.swing.JButton();
        finaliseMealButton = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        addPartButton1.setText("Add");
        addPartButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPartButton1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        searchList.setModel(new javax.swing.AbstractListModel<Object>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        searchList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        searchList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(searchList);

        searchBar.setText("Search ");
        searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchBarKeyPressed(evt);
            }
        });

        outputList.setModel(new javax.swing.AbstractListModel<Object>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        outputList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(outputList);

        addPartButton.setText("Add");
        addPartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPartButtonActionPerformed(evt);
            }
        });

        removePartButton.setText("Remove");
        removePartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePartButtonActionPerformed(evt);
            }
        });

        finaliseMealButton.setText("Finalise");
        finaliseMealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addPartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(finaliseMealButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(removePartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(addPartButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(removePartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(finaliseMealButton, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addPartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPartButtonActionPerformed
        short q=0; 
        switch (tag){ // checks whether the programme operates on excercises or ingredients
                case Tags.MEAL:
            try{
         q=Short.parseShort(JOptionPane.showInputDialog("Input quantity of the ingirdient in grams")); // displays input window
            } catch(java.lang.NumberFormatException e){ // handles erorneous input
            JOptionPane.showMessageDialog(this, "Input a proper number", null, JOptionPane.ERROR_MESSAGE);
            return;
            }
       Ingridient ing= new Ingridient(((Ingridient)(((DefaultListModel) this.searchList.getModel()).getElementAt(searchList.getSelectedIndex()))));// creates new ingredient using list
       ing.setQuantity(q);// sets inputed quantity
      ((DefaultListModel) this.outputList.getModel()).addElement(ing);// adds ingredient to the list from which meal will be created
      return;
                case Tags.EXCERCISES: 
            try{
         q=Short.parseShort(JOptionPane.showInputDialog("Input the duration of the excercise in minutes"));// displays input window
            } catch(java.lang.NumberFormatException e){ // handles erronerous input
            JOptionPane.showMessageDialog(this, "Input a proper number", null, JOptionPane.ERROR_MESSAGE); 
            return;
            }
       Excercise exc = new Excercise(((Excercise)(((DefaultListModel) this.searchList.getModel()).getElementAt(searchList.getSelectedIndex())))); // creates new excercise using list
       exc.setTime(q); //sets inputed time
       ((DefaultListModel) this.outputList.getModel()).addElement(exc); //adds to the list from which excercise plan will be created
       }
    }//GEN-LAST:event_addPartButtonActionPerformed

    private void addPartButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPartButton1ActionPerformed
     
    }//GEN-LAST:event_addPartButton1ActionPerformed

    private void removePartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePartButtonActionPerformed
       ((DefaultListModel) this.outputList.getModel()).removeElementAt(outputList.getSelectedIndex());
    }//GEN-LAST:event_removePartButtonActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
       if(((DefaultListModel) this.outputList.getModel()).size()==0){// checks if list is empty
       JOptionPane.showMessageDialog(this,"Select something"); // informs user
       return;
       }
       switch (tag){ // checks whether the programme operates od ingredients or excercises 
           case Tags.MEAL:
           Ingridient[] ming= new Ingridient[((DefaultListModel) this.outputList.getModel()).size()]; // fetch size of the list
        for(int i=0; i<ming.length; i++){ // put elements of the list into array
        ming[i]= (Ingridient) ((DefaultListModel) this.outputList.getModel()).getElementAt(i);
        }
       meal= new Meal(ming); // create new meal using the array
       meal.setName(JOptionPane.showInputDialog("Name your meal")); // user names the meal
      ((DefaultListModel<Object>)list.getModel()).addElement(meal); // add meal to the list of meals in the main frame
        day.addMeal(meal); // add meal to the day object
        frame.updateFields(); // update numerical fields in the main frame
      
      ((DefaultListModel) this.outputList.getModel()).clear(); // clear the list of chosen ingredients
       return;
           case Tags.EXCERCISES:
       Excercise[] exc=new Excercise[((DefaultListModel) this.outputList.getModel()).size()]; // fetch size of the list
       for(int i=0; i<exc.length ; i++){ // put elements of the list into array
       exc[i]=(Excercise) ((DefaultListModel) this.outputList.getModel()).getElementAt(i);
       }
       ExcercisePlan excPlan=new ExcercisePlan(exc,user);// create new excercise plan using the array and user data
       excPlan.setName(JOptionPane.showInputDialog("Name your excercise plan")); // user names excercise plan
        ((DefaultListModel<Object>)list.getModel()).addElement(excPlan); // add the plan to the list in mane frame
        day.addExcercisePlan(excPlan); // add the plan to the day object
        frame.updateFields(); // udpate numerical fields in the main frame
      ((DefaultListModel) this.outputList.getModel()).clear(); // clear the least of chosen excercises

       }
       frame.updateTips();// update tips in main frame
    }//GEN-LAST:event_addActionPerformed

    private void searchListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchListMouseClicked
       
        if(evt.getClickCount()==2 && tag.equals(Tags.MEAL)){
        ((Ingridient)searchList.getSelectedValue()).displayInformation();
        }
         if(evt.getClickCount()==2 && tag.equals(Tags.EXCERCISES)){
        ((Excercise)searchList.getSelectedValue()).displayInformation();
        }
    }//GEN-LAST:event_searchListMouseClicked

    private void searchBarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBarKeyPressed
       if(searchBar.getText().contains("Search")){ // eliminate the search text on the bar, so that the user does not have to
            searchBar.setText("");
}
       if(searched){ // If there was a previous search, get all ingredients back into the seatch list
        ((DefaultListModel) this.searchList.getModel()).clear();
             for (Object olist1 : olist) {
            ((DefaultListModel) this.searchList.getModel()).addElement(olist1);
 }
searchList.updateUI(); // update UI
searched=false; // signal no search was performed on the last key event
       }

if(evt.getExtendedKeyCode()==10){ // if user press "Enter" key starts search 
            int c=0; // counter that counts the number of found elements and also the last position in list where the matching element is
            Object temp ;
            for(int i=c; i<( this.searchList.getModel()).getSize(); i++){
                if(((DefaultListModel) this.searchList.getModel()).elementAt(i).toString().toLowerCase().startsWith(searchBar.getText().toLowerCase())){ // if element matches 
                   temp= ((DefaultListModel) this.searchList.getModel()).elementAt(c); 
                   ((DefaultListModel) this.searchList.getModel()).set(c,((DefaultListModel) this.searchList.getModel()).getElementAt(i));
                    ((DefaultListModel) this.searchList.getModel()).set(i,temp); // those three lines swap the matching element with the a one non mathching with the least index. 
                    // This results in the matching elements grouping from index 0 to c
                c++;
                }
                
            }
            System.out.println(c);
               ((DefaultListModel) this.searchList.getModel()).removeRange(c,(this.searchList.getModel()).getSize()-1 ); // cut the list to matching elements only
             searched=true; // Singal that search has been performed 
             searchList.updateUI(); //Update UI
        searchList.ensureIndexIsVisible(0); // Bring the user to the top of the list
  }

    }//GEN-LAST:event_searchBarKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChooseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        //</editor-fold>

        /* Create and display the form */  
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPartButton;
    private javax.swing.JButton addPartButton1;
    private javax.swing.JButton finaliseMealButton;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<Object> outputList;
    private javax.swing.JButton removePartButton;
    private javax.swing.JTextField searchBar;
    private javax.swing.JList<Object> searchList;
    // End of variables declaration//GEN-END:variables
}
