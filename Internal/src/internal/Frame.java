/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package internal;
import java.io.FileWriter;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author micha
 */
public class Frame extends java.awt.Frame {
    Person user= null;
    Ingridient[] ing=null ;
    Excercise[] exc=null ;
    Day day= new Day();
    Period period= new Period();
    boolean chartCreated=false;
    /**
     * Creates new form Frame
     * @param ing
     * @param exc
     * @param user
     */
   
    public Frame(Ingridient[] ing, Excercise[] exc, Person user){
    this.user=user ;
    this.ing=ing ;
    this.exc=exc ;
    this.setLocationRelativeTo(null);
    initComponents();
    mealList.setModel(new DefaultListModel());
    excerciseList.setModel(new DefaultListModel());
    dayList.setModel(new DefaultListModel());
    chartField.setVisible(false);
    BMRfield.setText(String.valueOf(user.getBMR()));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gender = new javax.swing.ButtonGroup();
        tabs = new javax.swing.JTabbedPane();
        informationTab = new javax.swing.JPanel();
        height = new javax.swing.JTextField();
        age = new javax.swing.JTextField();
        target = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        male = new javax.swing.JRadioButton();
        female = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        weight = new javax.swing.JTextField();
        Apply = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        instructionArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        dayTab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mealList = new javax.swing.JList<Object>();
        addMealButton = new javax.swing.JButton();
        energyField = new javax.swing.JTextField();
        energy = new javax.swing.JLabel();
        protein = new javax.swing.JLabel();
        carbohydrates = new javax.swing.JLabel();
        sugars = new javax.swing.JLabel();
        fat = new javax.swing.JLabel();
        proteinField = new javax.swing.JTextField();
        carbohydratesField = new javax.swing.JTextField();
        sugarsField = new javax.swing.JTextField();
        fatField = new javax.swing.JTextField();
        removeMealButton = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        tipsArea = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        excerciseList = new javax.swing.JList<Object>();
        energyBurntField = new javax.swing.JTextField();
        balanceField = new javax.swing.JTextField();
        addExcerciseButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        timeField = new javax.swing.JTextField();
        removeExcerciseButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        BMRfield = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        shoppingListDayButton = new javax.swing.JButton();
        calorieDeficitField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        changeTabButton = new javax.swing.JButton();
        summaryTab = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        dayList = new javax.swing.JList<>();
        jLabel11 = new javax.swing.JLabel();
        addDayButton = new javax.swing.JButton();
        removeDayButton = new javax.swing.JButton();
        printShoppingListPlanButton = new javax.swing.JButton();
        savePlanButton = new javax.swing.JButton();
        loadPlanButton = new javax.swing.JButton();
        analyseButton = new javax.swing.JButton();
        chartField = new javax.swing.JTextField();
        clearButton = new javax.swing.JButton();
        clearDayListButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        reportArea = new javax.swing.JTextArea();

        setLocationRelativeTo(null);
        setName("Healtyhy Day Manager"); // NOI18N
        setResizable(false);
        setTitle("Healthy Day Manager");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        height.setText(String.valueOf(user.getHeight()));
        height.setToolTipText("");
        height.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Frame.this.keyTyped(evt);
            }
        });

        age.setText(String.valueOf(user.getAge()));
        age.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Frame.this.keyTyped(evt);
            }
        });

        target.setText(String.valueOf(user.getTarget()));
        target.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetActionPerformed(evt);
            }
        });
        target.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Frame.this.keyTyped(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Your currnet weight");
        jLabel1.setToolTipText("");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Your current height ");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Your current age");

        gender.add(male);
        male.setSelected(user.isGender());
        male.setText("Male");

        gender.add(female);
        female.setSelected(!user.isGender());
        female.setText("Female");
        female.setToolTipText("");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Your target weight");

        weight.setText(String.valueOf(user.getWeight()));
        weight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Frame.this.keyTyped(evt);
            }
        });

        Apply.setText("Apply and start now!");
        Apply.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyActionPerformed(evt);
            }
        });

        instructionArea.setEditable(false);
        instructionArea.setColumns(20);
        instructionArea.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        instructionArea.setLineWrap(true);
        instructionArea.setRows(5);
        instructionArea.setText("Welcome! If you want to improve your dietetary and excercise habits you have come to the right place!\n\nThrough this programme you can:\n-Create your own diets from over 8000 ingredients and ready meals and excercise plans \n-Get tips that will help you create a balanced diet\n-Get instant shopping lists for your meals\n-Analyse and predict the effect of your diets and excercise plans on your weight \n\nWe just need you to give us some information about yourself and we are ready to go!");
        instructionArea.setToolTipText("");
        instructionArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(instructionArea);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Select your gender");

        javax.swing.GroupLayout informationTabLayout = new javax.swing.GroupLayout(informationTab);
        informationTab.setLayout(informationTabLayout);
        informationTabLayout.setHorizontalGroup(
            informationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informationTabLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(informationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(informationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(target)
                    .addGroup(informationTabLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(male, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                        .addGap(35, 35, 35)
                        .addComponent(female, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                        .addGap(36, 36, 36))
                    .addComponent(height)
                    .addComponent(age)
                    .addComponent(weight))
                .addGap(47, 47, 47)
                .addComponent(Apply, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                .addGap(50, 50, 50))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        informationTabLayout.setVerticalGroup(
            informationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informationTabLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addGroup(informationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(informationTabLayout.createSequentialGroup()
                        .addGroup(informationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(target, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(informationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(weight, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(informationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(height, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(informationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(male)
                            .addComponent(female)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(informationTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(Apply, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabs.addTab("Start ", informationTab);

        dayTab.setMaximumSize(new java.awt.Dimension(800, 600));
        dayTab.setName("Plan "); // NOI18N

        mealList.setModel(new javax.swing.AbstractListModel<Object>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        mealList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        mealList.setToolTipText("");
        mealList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mealListMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(mealList);

        addMealButton.setText("Add meal");
        addMealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMealButtonActionPerformed(evt);
            }
        });

        energyField.setEditable(false);
        energyField.setBackground(new java.awt.Color(204, 204, 204));
        energyField.setText("0");

        energy.setText("Energy");

        protein.setText("Protein");
        protein.setToolTipText("");

        carbohydrates.setText("Carbohydrates");

        sugars.setText("Sugars");

        fat.setText("Fat");

        proteinField.setEditable(false);
        proteinField.setBackground(new java.awt.Color(204, 204, 204));
        proteinField.setText("0");
        proteinField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proteinFieldActionPerformed(evt);
            }
        });

        carbohydratesField.setEditable(false);
        carbohydratesField.setBackground(new java.awt.Color(204, 204, 204));
        carbohydratesField.setText("0");

        sugarsField.setEditable(false);
        sugarsField.setBackground(new java.awt.Color(204, 204, 204));
        sugarsField.setText("0");

        fatField.setEditable(false);
        fatField.setBackground(new java.awt.Color(204, 204, 204));
        fatField.setText("0");

        removeMealButton.setText("Remove meal");
        removeMealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMealButtonActionPerformed(evt);
            }
        });

        tipsArea.setEditable(false);
        tipsArea.setColumns(20);
        tipsArea.setRows(5);
        jScrollPane8.setViewportView(tipsArea);

        excerciseList.setModel(new javax.swing.AbstractListModel<Object>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        excerciseList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        excerciseList.setToolTipText("");
        excerciseList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                excerciseListMousePressed(evt);
            }
        });
        jScrollPane9.setViewportView(excerciseList);

        energyBurntField.setEditable(false);
        energyBurntField.setBackground(new java.awt.Color(204, 204, 204));
        energyBurntField.setText("0");

        balanceField.setEditable(false);
        balanceField.setBackground(new java.awt.Color(204, 204, 204));
        balanceField.setText("0");

        addExcerciseButton.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        addExcerciseButton.setText("Add excercise plan");
        addExcerciseButton.setToolTipText("");
        addExcerciseButton.setActionCommand("");
        addExcerciseButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        addExcerciseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addExcerciseButtonMouseClicked(evt);
            }
        });
        addExcerciseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addExcerciseButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        jButton7.setText("Clear");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        timeField.setEditable(false);
        timeField.setBackground(new java.awt.Color(204, 204, 204));
        timeField.setText("0");
        timeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeFieldActionPerformed(evt);
            }
        });

        removeExcerciseButton.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        removeExcerciseButton.setText("Remove excercise plan");
        removeExcerciseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeExcerciseButtonMouseClicked(evt);
            }
        });
        removeExcerciseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeExcerciseButtonActionPerformed(evt);
            }
        });

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Energy balance");
        jLabel6.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Energy burnt");

        jLabel8.setText("Time spent");

        jLabel9.setText("Tips");

        BMRfield.setEditable(false);
        BMRfield.setBackground(new java.awt.Color(204, 204, 204));
        BMRfield.setText("0");
        BMRfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMRfieldActionPerformed(evt);
            }
        });

        jLabel10.setText("BMR");

        shoppingListDayButton.setText("Save shopping list");
        shoppingListDayButton.setToolTipText("");
        shoppingListDayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shoppingListDayButtonActionPerformed(evt);
            }
        });

        calorieDeficitField.setEditable(false);
        calorieDeficitField.setBackground(new java.awt.Color(204, 204, 204));
        calorieDeficitField.setText("0");
        calorieDeficitField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calorieDeficitFieldActionPerformed(evt);
            }
        });

        jLabel13.setText("Energy deficit");
        jLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        changeTabButton.setText("Analyse");
        changeTabButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeTabButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dayTabLayout = new javax.swing.GroupLayout(dayTab);
        dayTab.setLayout(dayTabLayout);
        dayTabLayout.setHorizontalGroup(
            dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dayTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dayTabLayout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dayTabLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(protein)
                                .addGap(220, 220, 220)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(energyField)
                                .addComponent(proteinField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(carbohydratesField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(sugarsField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(fatField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(carbohydrates, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(dayTabLayout.createSequentialGroup()
                        .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dayTabLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(shoppingListDayButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(dayTabLayout.createSequentialGroup()
                                .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(dayTabLayout.createSequentialGroup()
                                        .addGap(95, 95, 95)
                                        .addComponent(fat))
                                    .addGroup(dayTabLayout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addComponent(addMealButton, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(dayTabLayout.createSequentialGroup()
                                        .addGap(87, 87, 87)
                                        .addComponent(sugars))
                                    .addGroup(dayTabLayout.createSequentialGroup()
                                        .addGap(86, 86, 86)
                                        .addComponent(energy)))
                                .addGap(0, 28, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane8)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dayTabLayout.createSequentialGroup()
                                .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(removeMealButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(dayTabLayout.createSequentialGroup()
                                        .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(dayTabLayout.createSequentialGroup()
                                                .addGap(30, 30, 30)
                                                .addComponent(jLabel10))
                                            .addGroup(dayTabLayout.createSequentialGroup()
                                                .addGap(9, 9, 9)
                                                .addComponent(BMRfield, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                                        .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(calorieDeficitField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(11, 11, 11)))))
                .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dayTabLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(removeExcerciseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addExcerciseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 13, Short.MAX_VALUE))
                    .addGroup(dayTabLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                        .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(loadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(changeTabButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(dayTabLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(balanceField, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dayTabLayout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dayTabLayout.createSequentialGroup()
                                            .addComponent(jLabel8)
                                            .addGap(8, 8, 8)))
                                    .addGroup(dayTabLayout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(dayTabLayout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(energyBurntField, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(45, 45, 45)))
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        dayTabLayout.setVerticalGroup(
            dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dayTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dayTabLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(dayTabLayout.createSequentialGroup()
                        .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane9)
                            .addGroup(dayTabLayout.createSequentialGroup()
                                .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(removeMealButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(addMealButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(removeExcerciseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(addExcerciseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(50, 50, 50)
                                .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(dayTabLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(energyBurntField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(dayTabLayout.createSequentialGroup()
                                        .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(dayTabLayout.createSequentialGroup()
                                                .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(BMRfield)
                                                    .addComponent(calorieDeficitField)))
                                            .addGroup(dayTabLayout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(balanceField)))
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(8, 8, 8)
                                        .addGroup(dayTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dayTabLayout.createSequentialGroup()
                                                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(changeTabButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(dayTabLayout.createSequentialGroup()
                                        .addComponent(energy)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(energyField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(protein)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(proteinField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(carbohydrates)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(carbohydratesField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(sugars)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(sugarsField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fat)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fatField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(46, 46, 46)
                                        .addComponent(shoppingListDayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(28, 28, 28))))
        );

        tabs.addTab("Plan", dayTab);

        dayList.setModel(new javax.swing.AbstractListModel<Object>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        dayList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        dayList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane4.setViewportView(dayList);

        jLabel11.setText("Your daily plans");
        jLabel11.setFocusable(false);
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        addDayButton.setText("Add day");
        addDayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDayButtonActionPerformed(evt);
            }
        });

        removeDayButton.setText("Remove day");
        removeDayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDayButtonActionPerformed(evt);
            }
        });

        printShoppingListPlanButton.setText("Save shopping list");
        printShoppingListPlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printShoppingListPlanButtonActionPerformed(evt);
            }
        });

        savePlanButton.setText("Save period");
        savePlanButton.setToolTipText("");
        savePlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePlanButtonActionPerformed(evt);
            }
        });

        loadPlanButton.setText("Load period");
        loadPlanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadPlanButtonActionPerformed(evt);
            }
        });

        analyseButton.setText("Analyse");
        analyseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyseButtonActionPerformed(evt);
            }
        });

        chartField.setText("jTextField1");
        chartField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chartFieldActionPerformed(evt);
            }
        });

        clearButton.setText("Clear Anaysis");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        clearDayListButton.setText("Clear list");
        clearDayListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearDayListButtonActionPerformed(evt);
            }
        });

        reportArea.setEditable(false);
        reportArea.setColumns(20);
        reportArea.setRows(5);
        jScrollPane3.setViewportView(reportArea);

        javax.swing.GroupLayout summaryTabLayout = new javax.swing.GroupLayout(summaryTab);
        summaryTab.setLayout(summaryTabLayout);
        summaryTabLayout.setHorizontalGroup(
            summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(summaryTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                    .addComponent(clearDayListButton, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(summaryTabLayout.createSequentialGroup()
                        .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addDayButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeDayButton, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
                        .addGap(26, 26, 26)
                        .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loadPlanButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(savePlanButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(printShoppingListPlanButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(analyseButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(53, 53, 53)
                .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, summaryTabLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, summaryTabLayout.createSequentialGroup()
                        .addComponent(chartField, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))))
        );
        summaryTabLayout.setVerticalGroup(
            summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, summaryTabLayout.createSequentialGroup()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(summaryTabLayout.createSequentialGroup()
                        .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(summaryTabLayout.createSequentialGroup()
                                .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addDayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(savePlanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(removeDayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(loadPlanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(printShoppingListPlanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, summaryTabLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(chartField, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(summaryTabLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, summaryTabLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(analyseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(107, 107, 107))))
                    .addGroup(summaryTabLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearDayListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 54, Short.MAX_VALUE))
        );

        tabs.addTab("Analyse", summaryTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabs)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    
    
    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
      if(JOptionPane.showConfirmDialog(this, "Are you sure?" +"\n"+"All unsaved progress will be lost")==JOptionPane.OK_OPTION)
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void ApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyActionPerformed
       if(JOptionPane.showConfirmDialog(this, "Are you sure?" +"\n"+"This will removed all unsaved plans")==JOptionPane.OK_OPTION){
         day=new Day();
        ((DefaultListModel)excerciseList.getModel()).clear();
        ((DefaultListModel)mealList.getModel()).clear();
        this.updateFields();
       }
        try{
        user.setTarget(Float.parseFloat(target.getText()));
        user.setWeight(Float.parseFloat(weight.getText()));
        user.setHeight(Short.parseShort(height.getText()));
        user.setAge(Short.parseShort(age.getText()));
        if(male.isSelected()){user.setGender(true);}else{user.setGender(false);}
        user.recalculateBMR();
        BMRfield.setText(String.valueOf(user.getBMR()));
        this.updateFields();
        } catch(NumberFormatException e) {
        JOptionPane.showMessageDialog(Apply, "Please, chceck if you filled all the fields in the form correctly!");
        return;
        }
        try {
            Files.write(Paths.get("..\\Internal\\resources\\user_data\\user_data.txt"), user.toString().getBytes());
        } catch (IOException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
       tabs.setSelectedComponent(dayTab);
    }//GEN-LAST:event_ApplyActionPerformed

    private void keyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyTyped
        if (Character.isDigit(evt.getKeyChar()) ^ Character.compare(evt.getKeyChar(), '.')!=0)
                    evt.consume();
    }//GEN-LAST:event_keyTyped

    private void targetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_targetActionPerformed

    private void removeExcerciseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeExcerciseButtonActionPerformed
  try{ day.removeExcercisePlan((ExcercisePlan)((DefaultListModel) this.excerciseList.getModel()).getElementAt(excerciseList.getSelectedIndex()));
        this.updateFields();
        ((DefaultListModel) this.excerciseList.getModel()).removeElementAt(excerciseList.getSelectedIndex());
  }catch(java.lang.ArrayIndexOutOfBoundsException e){JOptionPane.showMessageDialog(this, "Nothing selected to remove!");}
    }//GEN-LAST:event_removeExcerciseButtonActionPerformed

    private void removeExcerciseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeExcerciseButtonMouseClicked
       
    }//GEN-LAST:event_removeExcerciseButtonMouseClicked

    private void timeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeFieldActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        SaveLoadFrame f=new SaveLoadFrame(this,Tags.LOAD,dayTab);
        f.setVisible(true);
    }//GEN-LAST:event_loadButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        SaveLoadFrame f=new SaveLoadFrame(this,Tags.SAVE,dayTab);
        f.setVisible(true);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void addExcerciseButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addExcerciseButtonMouseClicked
        
        ChooseFrame f= new ChooseFrame(exc,excerciseList,Tags.EXCERCISES,user,this);
        f.setVisible(true);
    }//GEN-LAST:event_addExcerciseButtonMouseClicked

    private void excerciseListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_excerciseListMousePressed
        if(evt.getClickCount()==2)
        ((ExcercisePlan)excerciseList.getSelectedValue()).displayInformation();
    }//GEN-LAST:event_excerciseListMousePressed

    private void removeMealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMealButtonActionPerformed
try{
        day.removeMeal((Meal)((DefaultListModel) this.mealList.getModel()).getElementAt(mealList.getSelectedIndex()));
        this.updateFields();
        ((DefaultListModel) this.mealList.getModel()).removeElementAt(mealList.getSelectedIndex());
} catch(java.lang.ArrayIndexOutOfBoundsException e){
JOptionPane.showMessageDialog(this, "Nothing selected to remove!");
}
    }//GEN-LAST:event_removeMealButtonActionPerformed

    private void proteinFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proteinFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_proteinFieldActionPerformed

    private void addMealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMealButtonActionPerformed

        ChooseFrame f= new ChooseFrame(ing, mealList,Tags.MEAL,user,this);
        f.setVisible(true);

    }//GEN-LAST:event_addMealButtonActionPerformed

    private void mealListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mealListMousePressed
        if(evt.getClickCount()==2)
        ((Meal)mealList.getSelectedValue()).displayInformation();
    }//GEN-LAST:event_mealListMousePressed

    private void removeDayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDayButtonActionPerformed
    try{
        period.removeDay((Day)((DefaultListModel<Object>)dayList.getModel()).getElementAt(dayList.getSelectedIndex()));
        ((DefaultListModel<Object>)dayList.getModel()).removeElementAt(dayList.getSelectedIndex());
    }
    catch(java.lang.ArrayIndexOutOfBoundsException e)
    {
        JOptionPane.showMessageDialog(this, "Nothing selected to remove!");
    }
    }//GEN-LAST:event_removeDayButtonActionPerformed

    private void addDayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDayButtonActionPerformed

        JFileChooser jf= new JFileChooser("..\\Internal\\resources\\days\\");
            jf.setVisible(true);
            jf.setMultiSelectionEnabled(true);
            jf.showOpenDialog(this);
        for (File selectedFile : jf.getSelectedFiles()) {
            ObjectInputStream is=null;
            try {
                FileInputStream fis = new FileInputStream(selectedFile.getAbsolutePath());
                is = new ObjectInputStream( new BufferedInputStream(fis) );
                period.addDay((Day)is.readObject());
                period.getDays()[period.getDays().length-1].setName(selectedFile.getName());
                ((DefaultListModel<Object>) this.dayList.getModel()).addElement(period.getDays()[period.getDays().length-1]);
            }catch(NullPointerException e) {
                System.out.println("NullPointerException: "+e.getMessage());
            }catch(ClassNotFoundException e) {
                System.out.println("ClassNotFoundException: "+e.getMessage());
            }catch(FileNotFoundException e) {
                System.out.println("FileNotFoundException: "+e.getMessage());
            }catch(EOFException e) {
                System.out.println("EOFException: "+e.getMessage());
            }catch (IOException ex) {
                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                is.close();
            } catch (IOException ex) {
                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch(NullPointerException ex){
           
            }
        }
    }//GEN-LAST:event_addDayButtonActionPerformed

    private void analyseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyseButtonActionPerformed

        clearButtonActionPerformed(null); //clear previous analysis
        int avg=0; 
        for(int i=0;  i<period.getDays().length; i++){ // update excercise data with current user data
            for(int j=0; j<period.getDays()[i].getExcercises().length; j++){
        period.getDays()[i].getExcercises()[j].updateUser(user);
            }
        period.getDays()[i].recalculate(); // recalculate energy balance to account for change in user data
        avg+=user.getBMR()-period.getDays()[i].getEnergyBalance();// sum energy deficits
        }
        
        avg=avg/period.getDays().length; //calculate average energy deficit
        reportArea.append("Your average calorie deficit is "+avg+"\n"); // display the deficit 
        DefaultCategoryDataset data= new DefaultCategoryDataset() ; // create dataset
        data.addValue(user.getWeight(),"Predicted weight",""+0); // add base value
        double prevVal=user.getWeight(); // get previous weight value
        if(!(predictEffects(0,1.0,data,"Predicted weight"))){ // check if predicted effects function runs sucessfully, if not, inform the user 
        reportArea.setText("");
        JOptionPane.showMessageDialog(this, "You will not achieve your target weight- the diet is not compatible with your goal");
        return;
        }
        predictEffects(0,1.5,data,"Predicted weightwith 50% more"); 
        predictEffects(0,2.0,data,"Predicted weight with 100% more");
        predictEffects(0,3.0,data,"Predicted weightwith 200% more"); //above three predict with different values of potential energy deficit
        user.recalculateBMR(); //recalculte user BMR
        
       /*
        int i=0;
        int c=0;
        if(prevVal>=user.getTarget()){
        while(prevVal>=user.getTarget()){
             user.calculateBMR((float) prevVal,user.getHeight(),user.getAge(),user.isGender());
             prevVal-=(user.getBMR()-period.getDays()[i%period.getDays().length].getEnergyBalance())*0.0001285714;
             System.out.println(prevVal);
             i++;
             if(i%7==0 && i!=0){
                 c++;
             data.setValue(prevVal,"Predicted weight",""+c);
             user.calculateBMR((float) prevVal,user.getHeight(),user.getAge(),user.isGender());
             }
        }
        }else{
            while(prevVal<=user.getTarget()){
            System.out.println(prevVal);
                try {
                    Thread.sleep(1);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
              
             prevVal-=(user.getBMR()-period.getDays()[i%period.getDays().length].getEnergyBalance())*0.0001285714;
             i++;
             if(i%7==0 && i!=0){
                 c++;
              data.setValue(prevVal,"Predicted weight",""+c);
             user.calculateBMR((float) prevVal,user.getHeight(),user.getAge(),user.isGender());
           
             }
               if(c==12 && prevVal>prevVal-(user.getBMR()-period.getDays()[i%period.getDays().length].getEnergyBalance())*0.0001285714){
                   wrongDirection=true;
                 break;
             }
        }
        }
        
        reportArea.append("You will achieve your target weight in "+c+" weeks with your current calorie deficit"+"\n");
       
        data.addValue(user.getWeight(),"Predicted weight if your calorie deficit was 50% more",""+0);
        prevVal=user.getWeight();
        i=0;
        c=0;
        
        
            if(prevVal>=user.getTarget()){
        while(prevVal>=user.getTarget()){
             user.calculateBMR((float) prevVal,user.getHeight(),user.getAge(),user.isGender());
             prevVal-=(user.getBMR()-period.getDays()[i%period.getDays().length].getEnergyBalance())*1.5*0.0001285714;
             System.out.println(prevVal);
             i++;
             if(i%7==0 && i!=0){
                 c++;
             data.setValue(prevVal,"Predicted weight if your calorie deficit was 50% more",""+c);
             user.calculateBMR((float) prevVal,user.getHeight(),user.getAge(),user.isGender());
             }
        }
        }else{
            while(prevVal<=user.getTarget()){
            
             prevVal-=(user.getBMR()-period.getDays()[i%period.getDays().length].getEnergyBalance())*1.5*0.0001285714;
             i++;
             if(i%7==0 && i!=0){
                 c++;
              data.setValue(prevVal,"Predicted weight if your calorie deficit was 50% more",""+c);
             user.calculateBMR((float) prevVal,user.getHeight(),user.getAge(),user.isGender());
             }
               if(c==12 && prevVal>prevVal-(user.getBMR()-period.getDays()[i%period.getDays().length].getEnergyBalance())*0.0001285714){
                 break;
             }
        }
            }
        reportArea.append("You will achieve your target weight in "+c+" weeks with 50% increased calorie deficit"+"\n");
        data.addValue(user.getWeight(),"Predicted weight if your calorie deficit was 100% more",""+0);
        prevVal=user.getWeight();
        
        i=0;
        c=0;
        
            if(prevVal>=user.getTarget()){
        while(prevVal>=user.getTarget()){
             user.calculateBMR((float) prevVal,user.getHeight(),user.getAge(),user.isGender());
             prevVal-=(user.getBMR()-period.getDays()[i%period.getDays().length].getEnergyBalance())*2*0.0001285714;
             System.out.println(prevVal);
             i++;
             if(i%7==0 && i!=0){
                 c++;
             data.setValue(prevVal,"Predicted weight if your calorie deficit was 100% more",""+c);
             user.calculateBMR((float) prevVal,user.getHeight(),user.getAge(),user.isGender());
             }
        }
        }else{
            while(prevVal<=user.getTarget()){
            
             prevVal-=(user.getBMR()-period.getDays()[i%period.getDays().length].getEnergyBalance())*2*0.0001285714;
             i++;
             if(i%7==0 && i!=0){
                 c++;
              data.setValue(prevVal,"Predicted weight if your calorie deficit was 100% more",""+c);
             user.calculateBMR((float) prevVal,user.getHeight(),user.getAge(),user.isGender());
             
             }
               if(c==12 && prevVal>prevVal-(user.getBMR()-period.getDays()[i%period.getDays().length].getEnergyBalance())*0.0001285714){
                 break;
             }
        }
            }
         reportArea.append("You will achieve your target weight in "+c+" weeks with 100% increased calorie deficit"+"\n");
          data.addValue(user.getWeight(),"Predicted weight if your calorie deficit was 200% more",""+0);
        prevVal=user.getWeight();
        
        i=0;
        c=0;
        
            if(prevVal>=user.getTarget()){
        while(prevVal>=user.getTarget()){
             user.calculateBMR((float) prevVal,user.getHeight(),user.getAge(),user.isGender());
             prevVal-=(user.getBMR()-period.getDays()[i%period.getDays().length].getEnergyBalance())*3*0.0001285714;
             System.out.println(prevVal);
             i++;
             if(i%7==0 && i!=0){
                 c++;
             data.setValue(prevVal,"Predicted weight if your calorie deficit was 200% more",""+c);
             user.calculateBMR((float) prevVal,user.getHeight(),user.getAge(),user.isGender());
             }
             
        }
        }else{
            while(prevVal<=user.getTarget()){
            
             prevVal-=(user.getBMR()-period.getDays()[i%period.getDays().length].getEnergyBalance())*3*0.0001285714;
             i++;
             if(i%7==0 && i!=0){
                 c++;
              data.setValue(prevVal,"Predicted weight if your calorie deficit was 200% more",""+c);
             user.calculateBMR((float) prevVal,user.getHeight(),user.getAge(),user.isGender());
             }
               if(c==12 && prevVal>prevVal-(user.getBMR()-period.getDays()[i%period.getDays().length].getEnergyBalance())*0.0001285714){
                 break;
             }
        }
            }
        reportArea.append("You will achieve your target weight in "+c+" weeks with 200% increased calorie deficit"+"\n");
        */
        
        
    
        
        JFreeChart chart= ChartFactory.createLineChart("Predicted effects of the plan", "Weeks since you start", "Your weight in kg", data, PlotOrientation.VERTICAL, true, true, false);
        chart.setBackgroundPaint(java.awt.Color.WHITE);
        chart.setBorderPaint(java.awt.Color.WHITE);
         ChartPanel cp= new ChartPanel(chart);
        javax.swing.GroupLayout summaryTabLayout = new javax.swing.GroupLayout(summaryTab);
         summaryTab.setLayout(summaryTabLayout);
        summaryTabLayout.setHorizontalGroup(
            summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(summaryTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                    .addComponent(clearDayListButton, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(summaryTabLayout.createSequentialGroup()
                        .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addDayButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeDayButton, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
                        .addGap(26, 26, 26)
                        .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loadPlanButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(savePlanButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(printShoppingListPlanButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(analyseButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(53, 53, 53)
                .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, summaryTabLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, summaryTabLayout.createSequentialGroup()
                        .addComponent(cp, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))))
        );
        summaryTabLayout.setVerticalGroup(
            summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, summaryTabLayout.createSequentialGroup()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(summaryTabLayout.createSequentialGroup()
                        .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(summaryTabLayout.createSequentialGroup()
                                .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addDayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(savePlanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(removeDayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(loadPlanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(printShoppingListPlanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, summaryTabLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(cp, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(summaryTabLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, summaryTabLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(analyseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(107, 107, 107))))
                    .addGroup(summaryTabLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(summaryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearDayListButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 54, Short.MAX_VALUE))
        );
        
        cp.setVisible(true);
        chartCreated=true;
        reportArea.append("While considering your calorie balance remember \n"+"to eat at least 1200 kcal a day and excercise safely");
        summaryTab.updateUI();
        
        
        
        
    }//GEN-LAST:event_analyseButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
       if(chartCreated){
        summaryTab.remove(summaryTab.getComponents()[summaryTab.getComponentCount()-1]);
        chartCreated=false;
        reportArea.setText("");
        summaryTab.updateUI();
       }
    }//GEN-LAST:event_clearButtonActionPerformed

    private void BMRfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMRfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BMRfieldActionPerformed

    private void shoppingListDayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shoppingListDayButtonActionPerformed
   String s="";
        for (Meal meal : day.getMeals()) {
            s+=meal.getName()+":";
               s+=("\r\n");   // write new line
             for (Ingridient ingridient : meal.getIngridients()) {
                s+=("" + ingridient);
                 s+=("\r\n");   // write new line
             }
               s+=("\r\n");   // write new line
         }
         if(s.equals("")){
            JOptionPane.showMessageDialog(null, "Add some meals first");
        return;
        }
        ViewFrame f=new ViewFrame(s,this,"Day");
        f.setVisible(true);
        
       
    }//GEN-LAST:event_shoppingListDayButtonActionPerformed

    private void savePlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePlanButtonActionPerformed
       try{ Day[] d=new Day[this.dayList.getModel().getSize()];
        ((DefaultListModel) this.dayList.getModel()).copyInto(d);
        period.setDays(d); 
        JFileChooser jf= new JFileChooser("..\\Internal\\resources\\periods\\");
        jf.setMultiSelectionEnabled(false);
        jf.showSaveDialog(this);
        period.setName(jf.getSelectedFile().getName());
            try {
                ObjectOutputStream os = new ObjectOutputStream(
                    new BufferedOutputStream(new FileOutputStream(jf.getSelectedFile().getAbsolutePath())));
                if(period.getDays().length==0 || period == null){
                JOptionPane.showMessageDialog(this,"There is nothinh to save", null, JOptionPane.ERROR_MESSAGE);
                return;
                }
                os.writeObject(period);
                os.close();
            } catch (IOException | java.lang.NullPointerException e) {
             
            }
       }catch (java.lang.NullPointerException e){
        }
    }//GEN-LAST:event_savePlanButtonActionPerformed

    private void loadPlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadPlanButtonActionPerformed
        try{ JFileChooser jf= new JFileChooser("..\\Internal\\resources\\periods\\");
            jf.setVisible(true);
            jf.setMultiSelectionEnabled(false);
            jf.showOpenDialog(this);

            ObjectInputStream is=null;
            try {
                FileInputStream fis = new FileInputStream(jf.getSelectedFile().getAbsolutePath());
                is = new ObjectInputStream( new BufferedInputStream(fis) );

                period=(Period)is.readObject();
                period.setName(jf.getSelectedFile().getName());
                this.updateDayList();
                 is.close();
            } catch (FileNotFoundException e) {
            
        } catch (IOException | ClassNotFoundException e) {
           
        }
        }catch (java.lang.NullPointerException e){
        
        }
    

           

    
    }//GEN-LAST:event_loadPlanButtonActionPerformed

    private void printShoppingListPlanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printShoppingListPlanButtonActionPerformed
     String s="";
        for (Day day1 : period.getDays()) {
             for (Meal meal : day1.getMeals()) {
                 s+=meal.getName()+":";
                   s+=("\r\n");
                 for (Ingridient ingridient : meal.getIngridients()) {
                     s+=("" + ingridient.toString());
                    s+=("\r\n");   // write new line
                 }
                  s+=("\r\n");   // write new line
             }
         }
        if(s.equals("")){
            JOptionPane.showMessageDialog(null, "Add some daily plans first");
        return;
        }
       ViewFrame f= new ViewFrame(s,this,"Period"); 

    }//GEN-LAST:event_printShoppingListPlanButtonActionPerformed

    private void clearDayListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearDayListButtonActionPerformed
       ((DefaultListModel)dayList.getModel()).removeAllElements();
        period=new Period();
    }//GEN-LAST:event_clearDayListButtonActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
       ((DefaultListModel)excerciseList.getModel()).removeAllElements();
       ((DefaultListModel)mealList.getModel()).removeAllElements();
       day=new Day();
       this.updateFields();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void chartFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chartFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chartFieldActionPerformed

    private void changeTabButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeTabButtonActionPerformed
        tabs.setSelectedComponent(summaryTab);
    }//GEN-LAST:event_changeTabButtonActionPerformed

    private void calorieDeficitFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calorieDeficitFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_calorieDeficitFieldActionPerformed

    private void addExcerciseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addExcerciseButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addExcerciseButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      
    }
    
    public void updateFields(){
        this.energyField.setText(String.valueOf(day.getEnergy()));
        this.carbohydratesField.setText(String.valueOf(day.getCarbohydrates()));
        this.fatField.setText(String.valueOf(day.getFat()));
        this.sugarsField.setText(String.valueOf(day.getSugars()));
        this.proteinField.setText(String.valueOf(day.getProtein()));
        this.balanceField.setText(String.valueOf(day.getEnergyBalance()));
        this.timeField.setText(String.valueOf(day.getTimeSpent()));
        this.energyBurntField.setText(String.valueOf(day.getCaloriesBurnt()));
        this.calorieDeficitField.setText(String.valueOf(user.getBMR()-day.getEnergyBalance()));
    }
    
    public void updateMealList(){
        for (Meal meal : day.getMeals()) { // Add each meal from day to the list
            ((DefaultListModel<Object>)mealList.getModel()).addElement(meal);
        }
    }
    public void updateExcercisePlanList(){
        for (ExcercisePlan excercise : day.getExcercises()) { //Add each excercise plan from day to the list
            ((DefaultListModel<Object>)excerciseList.getModel()).addElement(excercise);
        }
    }
   public void updateDayList(){
        for (Day day1 : period.getDays()) {
            ((DefaultListModel<Object>)dayList.getModel()).addElement(day1);
        }
   }
    
    public void updateTips(){
        tipsArea.setText(""); // reset tips
       float lb=(float) 0.9; // declare lower boundary 
       float ub=(float) 1.1; // declare upper boundary 
       if(day.getEnergy()<1200){ //check whether there is enoung calories
       tipsArea.setText("Eat more calories!"+"\n");
       } 
       else{ // all conditions under here check whether the nutritional value is withing given boudnaries
                if((float)(day.getCarbohydrates()/day.getEnergy())<(((float)300/(float)2000)*(lb-(float)0.4))){ 
                    tipsArea.append("Get more carbohydrates"+"\n");
                }else{ 
                    if((float)(day.getCarbohydrates()/day.getEnergy())>(((float)300/(float)2000)*(ub))){
                    tipsArea.append("Remove some carbohydrates"+"\n");
                        }
                }
                if((float)(day.getFat()/day.getEnergy())<(((float)67/(float)2000)*lb)){
                    tipsArea.append("Get more fats"+"\n"); 
                }else{ 
                    if((float)(day.getFat()/day.getEnergy())>(((float)300/(float)2000)*(ub))){
                    tipsArea.append("Remove some fats"+"\n");
                        }
                }
                if((float)(day.getSugars()/day.getEnergy())<(((float)50/(float)2000)*lb)){
                     tipsArea.append("Get more sugars"+"\n");
                }else{ 
                    if((float)(day.getSugars()/day.getEnergy())>(((float)300/(float)2000)*(ub))){
                    tipsArea.append("Remove some sugars"+"\n");
                        }
                }
                if((float)(day.getProtein()/day.getEnergy())<(((float)150/(float)2000)*lb)){
                    tipsArea.append("Get more protein"+"\n");
                }else{ 
                    if((float)(day.getProtein()/day.getEnergy())>(((float)300/(float)2000)*(ub+(float)0.2))){
                    tipsArea.append("Remove some protein"+"\n");
                        }
                }
                if(user.getBMR()>=day.getEnergyBalance()){
                tipsArea.append("You will lose some weight");
                } else{
                    tipsArea.append("You will gain some weight");
                }      
            }
        }
  public void saveDayList(){
    JFileChooser jf= new JFileChooser("..\\Internal\\resources\\shopping\\");
     jf.setMultiSelectionEnabled(false);
     jf.showSaveDialog(this);
     File file = jf.getSelectedFile();
        try{
            FileWriter writer = new FileWriter(jf.getSelectedFile().getAbsolutePath()+".txt", true);
         for (Meal meal : day.getMeals()) {
              writer.write("" + meal.getName());
               writer.write("\r\n");   // write new line
             for (Ingridient ingridient : meal.getIngridients()) {
                 writer.write("" + ingridient);
                 writer.write("\r\n");   // write new line
             }
              writer.write("\r\n");   // write new line
         }
        writer.close();   
             } catch (IOException e) {
            }
  }
public void savePeriodList(){ // 
 JFileChooser jf= new JFileChooser("..\\Internal\\resources\\shopping\\"); // choose file or create new one
     jf.setMultiSelectionEnabled(false); //disable multi selection
     jf.showSaveDialog(this); //show save window
     File file = jf.getSelectedFile(); // get file
        try{
            FileWriter writer = new FileWriter(jf.getSelectedFile().getAbsolutePath()+".txt", true); // create writer
         for (Day day1 : period.getDays()) { //iterate over all days
             for (Meal meal : day1.getMeals()) { // iterate over all meals in a day
                  writer.write("" + meal.getName()); // write name of the meal
                   writer.write("\r\n");   // write new line
                 for (Ingridient ingridient : meal.getIngridients()) { // iterate over all ingredients in a meal 
                     writer.write("" + ingridient.toString()); // write the name of the ingredient
                     writer.write("\r\n");   // write new line
                 }
                 writer.write("\r\n");   // write new line
             }
         }
        
        writer.close();   // close writer 
             } catch (IOException e) { // handle exception
                 JOptionPane.showMessageDialog(this, e.getMessage());
            }
}
    public void saveDay(){
    JFileChooser jf= new JFileChooser("..\\Internal\\resources\\days\\"); // create and set file chooser directory 
            jf.setVisible(true);
            jf.setMultiSelectionEnabled(false);  // disable multiselection
            jf.showSaveDialog(this); // show window

            try {
                ObjectOutputStream os = new ObjectOutputStream(
                    new BufferedOutputStream(new FileOutputStream(jf.getSelectedFile().getAbsolutePath()))); // establish output stream
                os.writeObject(day); // write object to file
                os.close(); // close output stream
            } catch (IOException e) { // catch exception 
                System.out.println(e.toString());
            }
    }
    public void saveMeal(){
        if(mealList.getSelectedIndex()==-1){
            JOptionPane.showMessageDialog(this, "Choose a meal to save from the list first");
        return;
        }
     JFileChooser jf= new JFileChooser("..\\Internal\\resources\\user_meals\\");
            jf.setVisible(true);
            jf.setMultiSelectionEnabled(false);
            jf.setSelectedFile(new File(""+(((Meal)(((DefaultListModel)mealList.getModel()).getElementAt(mealList.getSelectedIndex()))).getName())));
            jf.showSaveDialog(this);
            
            try {
                ObjectOutputStream os = new ObjectOutputStream(
                    new BufferedOutputStream(new FileOutputStream(jf.getSelectedFile().getAbsolutePath())));
                os.writeObject(((DefaultListModel)mealList.getModel()).getElementAt(mealList.getSelectedIndex()));
                os.close();
            } catch (IOException e) {
                System.out.println(e.toString());
            }
    }
     public void saveExcercises(){
         if(excerciseList.getSelectedIndex()==-1){
         JOptionPane.showMessageDialog(this, "Choose a excercise plan from the list first");
         return;
         }
     JFileChooser jf= new JFileChooser("..\\Internal\\resources\\user_excercises\\");
            jf.setVisible(true);
            jf.setMultiSelectionEnabled(false);
            jf.setSelectedFile(new File(""+(((ExcercisePlan)(((DefaultListModel)excerciseList.getModel()).getElementAt(excerciseList.getSelectedIndex()))).getName())));
            jf.showSaveDialog(this);

            try {
                ObjectOutputStream os = new ObjectOutputStream(
                    new BufferedOutputStream(new FileOutputStream(jf.getSelectedFile().getAbsolutePath())));
                os.writeObject(((DefaultListModel)excerciseList.getModel()).getElementAt(excerciseList.getSelectedIndex()));
                os.close();
            } catch (IOException e) {
                System.out.println(e.toString());
            }
    }
  
     public void loadMeals(){ 
         
         JFileChooser jf= new JFileChooser("..\\Internal\\resources\\user_meals\\");
            jf.setVisible(true);
            jf.setMultiSelectionEnabled(true);
            jf.showOpenDialog(this);
            ObjectInputStream is=null;
            try {
             for (int i=0; i<jf.getSelectedFiles().length; i++) {
                 
                 FileInputStream fis = new FileInputStream(jf.getSelectedFiles()[i].getAbsolutePath());
                 is = new ObjectInputStream( new BufferedInputStream(fis) );
                     Meal m=(Meal)is.readObject();
                     ((DefaultListModel)mealList.getModel()).addElement(m);
                     day.addMeal(m);
                 
             }
             is.close();
                }
            
            
            catch(NullPointerException e) {
                System.out.println("NullPointerException: "+e.getMessage());
            }
            catch(ClassNotFoundException e) {
                System.out.println("ClassNotFoundException: "+e.getMessage());
            }
            catch(FileNotFoundException e) {
                System.out.println("FileNotFoundException: "+e.getMessage());
            }
            catch(EOFException e) {
                System.out.println("EOFException: "+e.getMessage());
            } catch (IOException ex) {
                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
}
     public void loadExcercises(){ 
         
          
         JFileChooser jf= new JFileChooser("..\\Internal\\resources\\user_excercises\\");
            jf.setVisible(true);
            jf.setMultiSelectionEnabled(true);
            jf.showOpenDialog(this);

            ObjectInputStream is=null;
            try {
             for (File selectedFile : jf.getSelectedFiles()) {
                 FileInputStream fis = new FileInputStream(selectedFile.getAbsolutePath());
                 is = new ObjectInputStream( new BufferedInputStream(fis) );
                 ExcercisePlan e= (ExcercisePlan)is.readObject();
                 ((DefaultListModel)excerciseList.getModel()).addElement(e);
                 day.addExcercisePlan(e);
                 
             }
             if(day.getExcercises().length!=0){
                if(!user.equals(day.getExcercises()[0].getUser())){
                    for (ExcercisePlan excercise : day.getExcercises()) {
                        excercise.updateUser(user);
                    }
                }
             }
             
               is.close();
                }
            
            
            catch(NullPointerException e) {
                System.out.println("NullPointerException: "+e.getMessage());
            }
            catch(ClassNotFoundException e) {
                System.out.println("ClassNotFoundException: "+e.getMessage());
            }
            catch(FileNotFoundException e) {
                System.out.println("FileNotFoundException: "+e.getMessage());
            }
            catch(EOFException e) {
                System.out.println("EOFException: "+e.getMessage());
            } catch (IOException ex) {
                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
}
    public void loadDay(){ 
         
         JFileChooser jf= new JFileChooser("..\\Internal\\resources\\days\\"); // create and set files chooser directory 
            jf.setVisible(true);
            jf.setMultiSelectionEnabled(false); // disable multi selection
            jf.showOpenDialog(this); // show window

            ObjectInputStream is=null; // declare input stream 
            try {
                FileInputStream fis = new FileInputStream(jf.getSelectedFile().getAbsolutePath()); // declare file input stream using selected path
                is = new ObjectInputStream( new BufferedInputStream(fis) ); // create object input stream
                ((DefaultListModel)excerciseList.getModel()).clear(); // clear excercise list in main frame
                 ((DefaultListModel)mealList.getModel()).clear(); // clear meal list in main frame
                day=(Day)is.readObject(); // read day object from file
                if(day.getExcercises().length!=0){ // check whether there are any excercises
                if(!user.equals(day.getExcercises()[0].getUser())){ // check if the user data is different
                    for (ExcercisePlan excercise : day.getExcercises()) { // iterate over all excercises
                        excercise.updateUser(user); // update the user of the excercise
                    }
                }
                }
                is.close(); // close input stream
            } // below catches any exceptions 
            catch(NullPointerException e) {
                System.out.println("NullPointerException: "+e.getMessage());
            }
            catch(ClassNotFoundException e) {
                System.out.println("ClassNotFoundException: "+e.getMessage());
            }
            catch(FileNotFoundException e) {
                System.out.println("FileNotFoundException: "+e.getMessage());
            }
            catch(EOFException e) {
                System.out.println("EOFException: "+e.getMessage());
            } catch (IOException ex) {
                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    public boolean predictEffects(int shift, double multiplier, DefaultCategoryDataset data, String title){
        double  nextVal=user.getWeight(); //get user weight
        double difference=Math.abs(user.getWeight()-user.getTarget()); // get the difference between weight and target weight
        double nextPrevVal=nextVal-(user.getBMR()-period.getDays()[0%period.getDays().length].getEnergyBalance())*multiplier*0.0001285714; // get weight after a day of diet
        if(Math.abs(nextPrevVal-user.getTarget())>difference){ // if the difference is greater, it means the diet does the opposite what is supposed to, hence prediction is temrinated 
        return false; //signal bad diet
        }
        
        int i=0; //count days
        int c=0; //count weeks
        if(nextVal>=user.getTarget()){ // this statement is NOT redundant. It ensures that the programme goes through only one of the loops, eliminating bugs
        while(nextVal>=user.getTarget()){ // loop until the target weight is achieved
             user.calculateBMR((float) nextVal,user.getHeight(),user.getAge(),user.isGender()); // recalculate BMR after weight loss to account for further weight loss
             nextVal-=(user.getBMR()-period.getDays()[i%period.getDays().length].getEnergyBalance())*multiplier*0.0001285714; // get weight in next day
             i++;
             if(i%7==0 && i!=0){ // if a week ends
                 c++;
             data.setValue(nextVal,title,""+c); // set weekly value 
             user.calculateBMR((float) nextVal,user.getHeight(),user.getAge(),user.isGender()); // recalculate BMR, just to be sure
             }
            
             
        }
        }else{
            while(nextVal<=user.getTarget()){
             user.calculateBMR((float) nextVal,user.getHeight(),user.getAge(),user.isGender()); //recalculate BMR
              nextVal-=(user.getBMR()-period.getDays()[i%period.getDays().length].getEnergyBalance())*multiplier*0.0001285714; // get weight in next day
             i++;
             if(i%7==0 && i!=0){ // if a week ends
                 c++;
              data.setValue(nextVal,title,""+c);// set weekly value
             user.calculateBMR((float) nextVal,user.getHeight(),user.getAge(),user.isGender()); //recalculate BRM, just to be sure
           
             }      
        }
        }
        
        reportArea.append("You will achieve your target weight in "+c+" weeks with your current calorie deficit"+"\n"); // write a comment in the report area
       
         data.addValue(user.getWeight(),title,""+shift); 
         user.recalculateBMR(); // recalculate user BMI to base weight
         return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Apply;
    public javax.swing.JTextField BMRfield;
    private javax.swing.JButton addDayButton;
    private javax.swing.JButton addExcerciseButton;
    private javax.swing.JButton addMealButton;
    private javax.swing.JTextField age;
    private javax.swing.JButton analyseButton;
    public javax.swing.JTextField balanceField;
    public javax.swing.JTextField calorieDeficitField;
    private javax.swing.JLabel carbohydrates;
    public javax.swing.JTextField carbohydratesField;
    private javax.swing.JButton changeTabButton;
    private javax.swing.JTextField chartField;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton clearDayListButton;
    private javax.swing.JList<Object> dayList;
    private javax.swing.JPanel dayTab;
    private javax.swing.JLabel energy;
    public javax.swing.JTextField energyBurntField;
    public javax.swing.JTextField energyField;
    private javax.swing.JList<Object> excerciseList;
    private javax.swing.JLabel fat;
    public javax.swing.JTextField fatField;
    private javax.swing.JRadioButton female;
    private javax.swing.ButtonGroup gender;
    private javax.swing.JTextField height;
    private javax.swing.JPanel informationTab;
    private javax.swing.JTextArea instructionArea;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton loadPlanButton;
    private javax.swing.JRadioButton male;
    private javax.swing.JList<Object> mealList;
    private javax.swing.JButton printShoppingListPlanButton;
    private javax.swing.JLabel protein;
    public javax.swing.JTextField proteinField;
    private javax.swing.JButton removeDayButton;
    private javax.swing.JButton removeExcerciseButton;
    private javax.swing.JButton removeMealButton;
    private javax.swing.JTextArea reportArea;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton savePlanButton;
    private javax.swing.JButton shoppingListDayButton;
    private javax.swing.JLabel sugars;
    public javax.swing.JTextField sugarsField;
    private javax.swing.JPanel summaryTab;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTextField target;
    public javax.swing.JTextField timeField;
    private javax.swing.JTextArea tipsArea;
    private javax.swing.JTextField weight;
    // End of variables declaration//GEN-END:variables

   
}
